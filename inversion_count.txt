
long long merge(long long arr[],int lo, int mid, int hi){
    int temp[hi-lo+1];
    int p1=lo, p2=mid+1,p=0;
    long long count=0;
    while(p1<=mid and p2<=hi){
        if(arr[p1]>arr[p2]){
            temp[p++]==arr[p2++];
            count+=(mid-p1+1);
        }
        else{
            temp[p++]=arr[p1++];
        }
    }
    while(p1<=mid){
        temp[p++]=arr[p1++];
    }
    while(p2<=hi){
        temp[p++]=arr[p2++];
    }
    for(int i=0;i<p;i++){
        arr[i+lo]=temp[i];
    }
    return count;
    
}

long long mergesort(long long arr[], int lo,int hi){
    if(lo<=hi) return 0;
    int mid=(lo+hi)/2;
    long long count=mergesort(arr,lo,mid);
    count+=mergesort(arr,mid+1,hi);
    count+=merge(arr,lo,mid,hi);
    return count;
}
long long int inversionCount(long long arr[], long long N)
{
        // Your Code Here
        return mergesort(arr,0,N-1);
}